/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.oracle.datagrid.NoSQL.entity;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Name extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Name\",\"namespace\":\"com.oracle.datagrid.NoSQL.entity\",\"fields\":[{\"name\":\"firstName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"lastName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String firstName;
  @Deprecated public java.lang.String lastName;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Name() {}

  /**
   * All-args constructor.
   */
  public Name(java.lang.String firstName, java.lang.String lastName) {
    this.firstName = firstName;
    this.lastName = lastName;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return firstName;
    case 1: return lastName;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: firstName = (java.lang.String)value$; break;
    case 1: lastName = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'firstName' field.
   */
  public java.lang.String getFirstName() {
    return firstName;
  }

  /**
   * Sets the value of the 'firstName' field.
   * @param value the value to set.
   */
  public void setFirstName(java.lang.String value) {
    this.firstName = value;
  }

  /**
   * Gets the value of the 'lastName' field.
   */
  public java.lang.String getLastName() {
    return lastName;
  }

  /**
   * Sets the value of the 'lastName' field.
   * @param value the value to set.
   */
  public void setLastName(java.lang.String value) {
    this.lastName = value;
  }

  /** Creates a new Name RecordBuilder */
  public static com.oracle.datagrid.NoSQL.entity.Name.Builder newBuilder() {
    return new com.oracle.datagrid.NoSQL.entity.Name.Builder();
  }
  
  /** Creates a new Name RecordBuilder by copying an existing Builder */
  public static com.oracle.datagrid.NoSQL.entity.Name.Builder newBuilder(com.oracle.datagrid.NoSQL.entity.Name.Builder other) {
    return new com.oracle.datagrid.NoSQL.entity.Name.Builder(other);
  }
  
  /** Creates a new Name RecordBuilder by copying an existing Name instance */
  public static com.oracle.datagrid.NoSQL.entity.Name.Builder newBuilder(com.oracle.datagrid.NoSQL.entity.Name other) {
    return new com.oracle.datagrid.NoSQL.entity.Name.Builder(other);
  }
  
  /**
   * RecordBuilder for Name instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Name>
    implements org.apache.avro.data.RecordBuilder<Name> {

    private java.lang.String firstName;
    private java.lang.String lastName;

    /** Creates a new Builder */
    private Builder() {
      super(com.oracle.datagrid.NoSQL.entity.Name.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.oracle.datagrid.NoSQL.entity.Name.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.firstName)) {
        this.firstName = data().deepCopy(fields()[0].schema(), other.firstName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.lastName)) {
        this.lastName = data().deepCopy(fields()[1].schema(), other.lastName);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Name instance */
    private Builder(com.oracle.datagrid.NoSQL.entity.Name other) {
            super(com.oracle.datagrid.NoSQL.entity.Name.SCHEMA$);
      if (isValidValue(fields()[0], other.firstName)) {
        this.firstName = data().deepCopy(fields()[0].schema(), other.firstName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.lastName)) {
        this.lastName = data().deepCopy(fields()[1].schema(), other.lastName);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'firstName' field */
    public java.lang.String getFirstName() {
      return firstName;
    }
    
    /** Sets the value of the 'firstName' field */
    public com.oracle.datagrid.NoSQL.entity.Name.Builder setFirstName(java.lang.String value) {
      validate(fields()[0], value);
      this.firstName = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'firstName' field has been set */
    public boolean hasFirstName() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'firstName' field */
    public com.oracle.datagrid.NoSQL.entity.Name.Builder clearFirstName() {
      firstName = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'lastName' field */
    public java.lang.String getLastName() {
      return lastName;
    }
    
    /** Sets the value of the 'lastName' field */
    public com.oracle.datagrid.NoSQL.entity.Name.Builder setLastName(java.lang.String value) {
      validate(fields()[1], value);
      this.lastName = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'lastName' field has been set */
    public boolean hasLastName() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'lastName' field */
    public com.oracle.datagrid.NoSQL.entity.Name.Builder clearLastName() {
      lastName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public Name build() {
      try {
        Name record = new Name();
        record.firstName = fieldSetFlags()[0] ? this.firstName : (java.lang.String) defaultValue(fields()[0]);
        record.lastName = fieldSetFlags()[1] ? this.lastName : (java.lang.String) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
