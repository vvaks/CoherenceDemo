/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.oracle.datagrid.NoSQL.entity;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Customer extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Customer\",\"namespace\":\"com.oracle.datagrid.NoSQL.entity\",\"fields\":[{\"name\":\"customerId\",\"type\":\"int\"},{\"name\":\"customerName\",\"type\":{\"type\":\"record\",\"name\":\"Name\",\"fields\":[{\"name\":\"firstName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"lastName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]},\"namespace\":\"com.oracle.datagrid.NoSQL.entity\"},{\"name\":\"customerPhone\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"accountNumber\",\"type\":\"int\"},{\"name\":\"customerLocation\",\"type\":{\"type\":\"record\",\"name\":\"Location\",\"fields\":[{\"name\":\"locationId\",\"type\":\"int\"},{\"name\":\"address\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"city\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"state\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"postalCode\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"country\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}},{\"name\":\"customerDevices\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Device\",\"fields\":[{\"name\":\"deviceId\",\"type\":\"int\"},{\"name\":\"deviceType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"deviceSerialNumber\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"deviceStatus\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"deviceMake\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"deviceModel\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"macAddress\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"ipAddress\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}}},{\"name\":\"customerServices\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Service\",\"fields\":[{\"name\":\"serviceId\",\"type\":\"int\"},{\"name\":\"serviceName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"serviceDescription\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"serviceLOB\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"serviceRate\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"serviceCode\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int customerId;
  @Deprecated public com.oracle.datagrid.NoSQL.entity.Name customerName;
  @Deprecated public java.lang.String customerPhone;
  @Deprecated public int accountNumber;
  @Deprecated public com.oracle.datagrid.NoSQL.entity.Location customerLocation;
  @Deprecated public java.util.List<com.oracle.datagrid.NoSQL.entity.Device> customerDevices;
  @Deprecated public java.util.List<com.oracle.datagrid.NoSQL.entity.Service> customerServices;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Customer() {}

  /**
   * All-args constructor.
   */
  public Customer(java.lang.Integer customerId, com.oracle.datagrid.NoSQL.entity.Name customerName, java.lang.String customerPhone, java.lang.Integer accountNumber, com.oracle.datagrid.NoSQL.entity.Location customerLocation, java.util.List<com.oracle.datagrid.NoSQL.entity.Device> customerDevices, java.util.List<com.oracle.datagrid.NoSQL.entity.Service> customerServices) {
    this.customerId = customerId;
    this.customerName = customerName;
    this.customerPhone = customerPhone;
    this.accountNumber = accountNumber;
    this.customerLocation = customerLocation;
    this.customerDevices = customerDevices;
    this.customerServices = customerServices;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return customerId;
    case 1: return customerName;
    case 2: return customerPhone;
    case 3: return accountNumber;
    case 4: return customerLocation;
    case 5: return customerDevices;
    case 6: return customerServices;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: customerId = (java.lang.Integer)value$; break;
    case 1: customerName = (com.oracle.datagrid.NoSQL.entity.Name)value$; break;
    case 2: customerPhone = (java.lang.String)value$; break;
    case 3: accountNumber = (java.lang.Integer)value$; break;
    case 4: customerLocation = (com.oracle.datagrid.NoSQL.entity.Location)value$; break;
    case 5: customerDevices = (java.util.List<com.oracle.datagrid.NoSQL.entity.Device>)value$; break;
    case 6: customerServices = (java.util.List<com.oracle.datagrid.NoSQL.entity.Service>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'customerId' field.
   */
  public java.lang.Integer getCustomerId() {
    return customerId;
  }

  /**
   * Sets the value of the 'customerId' field.
   * @param value the value to set.
   */
  public void setCustomerId(java.lang.Integer value) {
    this.customerId = value;
  }

  /**
   * Gets the value of the 'customerName' field.
   */
  public com.oracle.datagrid.NoSQL.entity.Name getCustomerName() {
    return customerName;
  }

  /**
   * Sets the value of the 'customerName' field.
   * @param value the value to set.
   */
  public void setCustomerName(com.oracle.datagrid.NoSQL.entity.Name value) {
    this.customerName = value;
  }

  /**
   * Gets the value of the 'customerPhone' field.
   */
  public java.lang.String getCustomerPhone() {
    return customerPhone;
  }

  /**
   * Sets the value of the 'customerPhone' field.
   * @param value the value to set.
   */
  public void setCustomerPhone(java.lang.String value) {
    this.customerPhone = value;
  }

  /**
   * Gets the value of the 'accountNumber' field.
   */
  public java.lang.Integer getAccountNumber() {
    return accountNumber;
  }

  /**
   * Sets the value of the 'accountNumber' field.
   * @param value the value to set.
   */
  public void setAccountNumber(java.lang.Integer value) {
    this.accountNumber = value;
  }

  /**
   * Gets the value of the 'customerLocation' field.
   */
  public com.oracle.datagrid.NoSQL.entity.Location getCustomerLocation() {
    return customerLocation;
  }

  /**
   * Sets the value of the 'customerLocation' field.
   * @param value the value to set.
   */
  public void setCustomerLocation(com.oracle.datagrid.NoSQL.entity.Location value) {
    this.customerLocation = value;
  }

  /**
   * Gets the value of the 'customerDevices' field.
   */
  public java.util.List<com.oracle.datagrid.NoSQL.entity.Device> getCustomerDevices() {
    return customerDevices;
  }

  /**
   * Sets the value of the 'customerDevices' field.
   * @param value the value to set.
   */
  public void setCustomerDevices(java.util.List<com.oracle.datagrid.NoSQL.entity.Device> value) {
    this.customerDevices = value;
  }

  /**
   * Gets the value of the 'customerServices' field.
   */
  public java.util.List<com.oracle.datagrid.NoSQL.entity.Service> getCustomerServices() {
    return customerServices;
  }

  /**
   * Sets the value of the 'customerServices' field.
   * @param value the value to set.
   */
  public void setCustomerServices(java.util.List<com.oracle.datagrid.NoSQL.entity.Service> value) {
    this.customerServices = value;
  }

  /** Creates a new Customer RecordBuilder */
  public static com.oracle.datagrid.NoSQL.entity.Customer.Builder newBuilder() {
    return new com.oracle.datagrid.NoSQL.entity.Customer.Builder();
  }
  
  /** Creates a new Customer RecordBuilder by copying an existing Builder */
  public static com.oracle.datagrid.NoSQL.entity.Customer.Builder newBuilder(com.oracle.datagrid.NoSQL.entity.Customer.Builder other) {
    return new com.oracle.datagrid.NoSQL.entity.Customer.Builder(other);
  }
  
  /** Creates a new Customer RecordBuilder by copying an existing Customer instance */
  public static com.oracle.datagrid.NoSQL.entity.Customer.Builder newBuilder(com.oracle.datagrid.NoSQL.entity.Customer other) {
    return new com.oracle.datagrid.NoSQL.entity.Customer.Builder(other);
  }
  
  /**
   * RecordBuilder for Customer instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Customer>
    implements org.apache.avro.data.RecordBuilder<Customer> {

    private int customerId;
    private com.oracle.datagrid.NoSQL.entity.Name customerName;
    private java.lang.String customerPhone;
    private int accountNumber;
    private com.oracle.datagrid.NoSQL.entity.Location customerLocation;
    private java.util.List<com.oracle.datagrid.NoSQL.entity.Device> customerDevices;
    private java.util.List<com.oracle.datagrid.NoSQL.entity.Service> customerServices;

    /** Creates a new Builder */
    private Builder() {
      super(com.oracle.datagrid.NoSQL.entity.Customer.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.oracle.datagrid.NoSQL.entity.Customer.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.customerId)) {
        this.customerId = data().deepCopy(fields()[0].schema(), other.customerId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.customerName)) {
        this.customerName = data().deepCopy(fields()[1].schema(), other.customerName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.customerPhone)) {
        this.customerPhone = data().deepCopy(fields()[2].schema(), other.customerPhone);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.accountNumber)) {
        this.accountNumber = data().deepCopy(fields()[3].schema(), other.accountNumber);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.customerLocation)) {
        this.customerLocation = data().deepCopy(fields()[4].schema(), other.customerLocation);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.customerDevices)) {
        this.customerDevices = data().deepCopy(fields()[5].schema(), other.customerDevices);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.customerServices)) {
        this.customerServices = data().deepCopy(fields()[6].schema(), other.customerServices);
        fieldSetFlags()[6] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Customer instance */
    private Builder(com.oracle.datagrid.NoSQL.entity.Customer other) {
            super(com.oracle.datagrid.NoSQL.entity.Customer.SCHEMA$);
      if (isValidValue(fields()[0], other.customerId)) {
        this.customerId = data().deepCopy(fields()[0].schema(), other.customerId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.customerName)) {
        this.customerName = data().deepCopy(fields()[1].schema(), other.customerName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.customerPhone)) {
        this.customerPhone = data().deepCopy(fields()[2].schema(), other.customerPhone);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.accountNumber)) {
        this.accountNumber = data().deepCopy(fields()[3].schema(), other.accountNumber);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.customerLocation)) {
        this.customerLocation = data().deepCopy(fields()[4].schema(), other.customerLocation);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.customerDevices)) {
        this.customerDevices = data().deepCopy(fields()[5].schema(), other.customerDevices);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.customerServices)) {
        this.customerServices = data().deepCopy(fields()[6].schema(), other.customerServices);
        fieldSetFlags()[6] = true;
      }
    }

    /** Gets the value of the 'customerId' field */
    public java.lang.Integer getCustomerId() {
      return customerId;
    }
    
    /** Sets the value of the 'customerId' field */
    public com.oracle.datagrid.NoSQL.entity.Customer.Builder setCustomerId(int value) {
      validate(fields()[0], value);
      this.customerId = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'customerId' field has been set */
    public boolean hasCustomerId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'customerId' field */
    public com.oracle.datagrid.NoSQL.entity.Customer.Builder clearCustomerId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'customerName' field */
    public com.oracle.datagrid.NoSQL.entity.Name getCustomerName() {
      return customerName;
    }
    
    /** Sets the value of the 'customerName' field */
    public com.oracle.datagrid.NoSQL.entity.Customer.Builder setCustomerName(com.oracle.datagrid.NoSQL.entity.Name value) {
      validate(fields()[1], value);
      this.customerName = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'customerName' field has been set */
    public boolean hasCustomerName() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'customerName' field */
    public com.oracle.datagrid.NoSQL.entity.Customer.Builder clearCustomerName() {
      customerName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'customerPhone' field */
    public java.lang.String getCustomerPhone() {
      return customerPhone;
    }
    
    /** Sets the value of the 'customerPhone' field */
    public com.oracle.datagrid.NoSQL.entity.Customer.Builder setCustomerPhone(java.lang.String value) {
      validate(fields()[2], value);
      this.customerPhone = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'customerPhone' field has been set */
    public boolean hasCustomerPhone() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'customerPhone' field */
    public com.oracle.datagrid.NoSQL.entity.Customer.Builder clearCustomerPhone() {
      customerPhone = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'accountNumber' field */
    public java.lang.Integer getAccountNumber() {
      return accountNumber;
    }
    
    /** Sets the value of the 'accountNumber' field */
    public com.oracle.datagrid.NoSQL.entity.Customer.Builder setAccountNumber(int value) {
      validate(fields()[3], value);
      this.accountNumber = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'accountNumber' field has been set */
    public boolean hasAccountNumber() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'accountNumber' field */
    public com.oracle.datagrid.NoSQL.entity.Customer.Builder clearAccountNumber() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'customerLocation' field */
    public com.oracle.datagrid.NoSQL.entity.Location getCustomerLocation() {
      return customerLocation;
    }
    
    /** Sets the value of the 'customerLocation' field */
    public com.oracle.datagrid.NoSQL.entity.Customer.Builder setCustomerLocation(com.oracle.datagrid.NoSQL.entity.Location value) {
      validate(fields()[4], value);
      this.customerLocation = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'customerLocation' field has been set */
    public boolean hasCustomerLocation() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'customerLocation' field */
    public com.oracle.datagrid.NoSQL.entity.Customer.Builder clearCustomerLocation() {
      customerLocation = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'customerDevices' field */
    public java.util.List<com.oracle.datagrid.NoSQL.entity.Device> getCustomerDevices() {
      return customerDevices;
    }
    
    /** Sets the value of the 'customerDevices' field */
    public com.oracle.datagrid.NoSQL.entity.Customer.Builder setCustomerDevices(java.util.List<com.oracle.datagrid.NoSQL.entity.Device> value) {
      validate(fields()[5], value);
      this.customerDevices = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'customerDevices' field has been set */
    public boolean hasCustomerDevices() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'customerDevices' field */
    public com.oracle.datagrid.NoSQL.entity.Customer.Builder clearCustomerDevices() {
      customerDevices = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'customerServices' field */
    public java.util.List<com.oracle.datagrid.NoSQL.entity.Service> getCustomerServices() {
      return customerServices;
    }
    
    /** Sets the value of the 'customerServices' field */
    public com.oracle.datagrid.NoSQL.entity.Customer.Builder setCustomerServices(java.util.List<com.oracle.datagrid.NoSQL.entity.Service> value) {
      validate(fields()[6], value);
      this.customerServices = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'customerServices' field has been set */
    public boolean hasCustomerServices() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'customerServices' field */
    public com.oracle.datagrid.NoSQL.entity.Customer.Builder clearCustomerServices() {
      customerServices = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    public Customer build() {
      try {
        Customer record = new Customer();
        record.customerId = fieldSetFlags()[0] ? this.customerId : (java.lang.Integer) defaultValue(fields()[0]);
        record.customerName = fieldSetFlags()[1] ? this.customerName : (com.oracle.datagrid.NoSQL.entity.Name) defaultValue(fields()[1]);
        record.customerPhone = fieldSetFlags()[2] ? this.customerPhone : (java.lang.String) defaultValue(fields()[2]);
        record.accountNumber = fieldSetFlags()[3] ? this.accountNumber : (java.lang.Integer) defaultValue(fields()[3]);
        record.customerLocation = fieldSetFlags()[4] ? this.customerLocation : (com.oracle.datagrid.NoSQL.entity.Location) defaultValue(fields()[4]);
        record.customerDevices = fieldSetFlags()[5] ? this.customerDevices : (java.util.List<com.oracle.datagrid.NoSQL.entity.Device>) defaultValue(fields()[5]);
        record.customerServices = fieldSetFlags()[6] ? this.customerServices : (java.util.List<com.oracle.datagrid.NoSQL.entity.Service>) defaultValue(fields()[6]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
