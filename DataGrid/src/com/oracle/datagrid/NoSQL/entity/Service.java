/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.oracle.datagrid.NoSQL.entity;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Service extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Service\",\"namespace\":\"com.oracle.datagrid.NoSQL.entity\",\"fields\":[{\"name\":\"serviceId\",\"type\":\"int\"},{\"name\":\"serviceName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"serviceDescription\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"serviceLOB\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"serviceRate\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"serviceCode\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int serviceId;
  @Deprecated public java.lang.String serviceName;
  @Deprecated public java.lang.String serviceDescription;
  @Deprecated public java.lang.String serviceLOB;
  @Deprecated public java.lang.String serviceRate;
  @Deprecated public java.lang.String serviceCode;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Service() {}

  /**
   * All-args constructor.
   */
  public Service(java.lang.Integer serviceId, java.lang.String serviceName, java.lang.String serviceDescription, java.lang.String serviceLOB, java.lang.String serviceRate, java.lang.String serviceCode) {
    this.serviceId = serviceId;
    this.serviceName = serviceName;
    this.serviceDescription = serviceDescription;
    this.serviceLOB = serviceLOB;
    this.serviceRate = serviceRate;
    this.serviceCode = serviceCode;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return serviceId;
    case 1: return serviceName;
    case 2: return serviceDescription;
    case 3: return serviceLOB;
    case 4: return serviceRate;
    case 5: return serviceCode;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: serviceId = (java.lang.Integer)value$; break;
    case 1: serviceName = (java.lang.String)value$; break;
    case 2: serviceDescription = (java.lang.String)value$; break;
    case 3: serviceLOB = (java.lang.String)value$; break;
    case 4: serviceRate = (java.lang.String)value$; break;
    case 5: serviceCode = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'serviceId' field.
   */
  public java.lang.Integer getServiceId() {
    return serviceId;
  }

  /**
   * Sets the value of the 'serviceId' field.
   * @param value the value to set.
   */
  public void setServiceId(java.lang.Integer value) {
    this.serviceId = value;
  }

  /**
   * Gets the value of the 'serviceName' field.
   */
  public java.lang.String getServiceName() {
    return serviceName;
  }

  /**
   * Sets the value of the 'serviceName' field.
   * @param value the value to set.
   */
  public void setServiceName(java.lang.String value) {
    this.serviceName = value;
  }

  /**
   * Gets the value of the 'serviceDescription' field.
   */
  public java.lang.String getServiceDescription() {
    return serviceDescription;
  }

  /**
   * Sets the value of the 'serviceDescription' field.
   * @param value the value to set.
   */
  public void setServiceDescription(java.lang.String value) {
    this.serviceDescription = value;
  }

  /**
   * Gets the value of the 'serviceLOB' field.
   */
  public java.lang.String getServiceLOB() {
    return serviceLOB;
  }

  /**
   * Sets the value of the 'serviceLOB' field.
   * @param value the value to set.
   */
  public void setServiceLOB(java.lang.String value) {
    this.serviceLOB = value;
  }

  /**
   * Gets the value of the 'serviceRate' field.
   */
  public java.lang.String getServiceRate() {
    return serviceRate;
  }

  /**
   * Sets the value of the 'serviceRate' field.
   * @param value the value to set.
   */
  public void setServiceRate(java.lang.String value) {
    this.serviceRate = value;
  }

  /**
   * Gets the value of the 'serviceCode' field.
   */
  public java.lang.String getServiceCode() {
    return serviceCode;
  }

  /**
   * Sets the value of the 'serviceCode' field.
   * @param value the value to set.
   */
  public void setServiceCode(java.lang.String value) {
    this.serviceCode = value;
  }

  /** Creates a new Service RecordBuilder */
  public static com.oracle.datagrid.NoSQL.entity.Service.Builder newBuilder() {
    return new com.oracle.datagrid.NoSQL.entity.Service.Builder();
  }
  
  /** Creates a new Service RecordBuilder by copying an existing Builder */
  public static com.oracle.datagrid.NoSQL.entity.Service.Builder newBuilder(com.oracle.datagrid.NoSQL.entity.Service.Builder other) {
    return new com.oracle.datagrid.NoSQL.entity.Service.Builder(other);
  }
  
  /** Creates a new Service RecordBuilder by copying an existing Service instance */
  public static com.oracle.datagrid.NoSQL.entity.Service.Builder newBuilder(com.oracle.datagrid.NoSQL.entity.Service other) {
    return new com.oracle.datagrid.NoSQL.entity.Service.Builder(other);
  }
  
  /**
   * RecordBuilder for Service instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Service>
    implements org.apache.avro.data.RecordBuilder<Service> {

    private int serviceId;
    private java.lang.String serviceName;
    private java.lang.String serviceDescription;
    private java.lang.String serviceLOB;
    private java.lang.String serviceRate;
    private java.lang.String serviceCode;

    /** Creates a new Builder */
    private Builder() {
      super(com.oracle.datagrid.NoSQL.entity.Service.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.oracle.datagrid.NoSQL.entity.Service.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.serviceId)) {
        this.serviceId = data().deepCopy(fields()[0].schema(), other.serviceId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.serviceName)) {
        this.serviceName = data().deepCopy(fields()[1].schema(), other.serviceName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.serviceDescription)) {
        this.serviceDescription = data().deepCopy(fields()[2].schema(), other.serviceDescription);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.serviceLOB)) {
        this.serviceLOB = data().deepCopy(fields()[3].schema(), other.serviceLOB);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.serviceRate)) {
        this.serviceRate = data().deepCopy(fields()[4].schema(), other.serviceRate);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.serviceCode)) {
        this.serviceCode = data().deepCopy(fields()[5].schema(), other.serviceCode);
        fieldSetFlags()[5] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Service instance */
    private Builder(com.oracle.datagrid.NoSQL.entity.Service other) {
            super(com.oracle.datagrid.NoSQL.entity.Service.SCHEMA$);
      if (isValidValue(fields()[0], other.serviceId)) {
        this.serviceId = data().deepCopy(fields()[0].schema(), other.serviceId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.serviceName)) {
        this.serviceName = data().deepCopy(fields()[1].schema(), other.serviceName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.serviceDescription)) {
        this.serviceDescription = data().deepCopy(fields()[2].schema(), other.serviceDescription);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.serviceLOB)) {
        this.serviceLOB = data().deepCopy(fields()[3].schema(), other.serviceLOB);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.serviceRate)) {
        this.serviceRate = data().deepCopy(fields()[4].schema(), other.serviceRate);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.serviceCode)) {
        this.serviceCode = data().deepCopy(fields()[5].schema(), other.serviceCode);
        fieldSetFlags()[5] = true;
      }
    }

    /** Gets the value of the 'serviceId' field */
    public java.lang.Integer getServiceId() {
      return serviceId;
    }
    
    /** Sets the value of the 'serviceId' field */
    public com.oracle.datagrid.NoSQL.entity.Service.Builder setServiceId(int value) {
      validate(fields()[0], value);
      this.serviceId = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'serviceId' field has been set */
    public boolean hasServiceId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'serviceId' field */
    public com.oracle.datagrid.NoSQL.entity.Service.Builder clearServiceId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'serviceName' field */
    public java.lang.String getServiceName() {
      return serviceName;
    }
    
    /** Sets the value of the 'serviceName' field */
    public com.oracle.datagrid.NoSQL.entity.Service.Builder setServiceName(java.lang.String value) {
      validate(fields()[1], value);
      this.serviceName = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'serviceName' field has been set */
    public boolean hasServiceName() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'serviceName' field */
    public com.oracle.datagrid.NoSQL.entity.Service.Builder clearServiceName() {
      serviceName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'serviceDescription' field */
    public java.lang.String getServiceDescription() {
      return serviceDescription;
    }
    
    /** Sets the value of the 'serviceDescription' field */
    public com.oracle.datagrid.NoSQL.entity.Service.Builder setServiceDescription(java.lang.String value) {
      validate(fields()[2], value);
      this.serviceDescription = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'serviceDescription' field has been set */
    public boolean hasServiceDescription() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'serviceDescription' field */
    public com.oracle.datagrid.NoSQL.entity.Service.Builder clearServiceDescription() {
      serviceDescription = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'serviceLOB' field */
    public java.lang.String getServiceLOB() {
      return serviceLOB;
    }
    
    /** Sets the value of the 'serviceLOB' field */
    public com.oracle.datagrid.NoSQL.entity.Service.Builder setServiceLOB(java.lang.String value) {
      validate(fields()[3], value);
      this.serviceLOB = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'serviceLOB' field has been set */
    public boolean hasServiceLOB() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'serviceLOB' field */
    public com.oracle.datagrid.NoSQL.entity.Service.Builder clearServiceLOB() {
      serviceLOB = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'serviceRate' field */
    public java.lang.String getServiceRate() {
      return serviceRate;
    }
    
    /** Sets the value of the 'serviceRate' field */
    public com.oracle.datagrid.NoSQL.entity.Service.Builder setServiceRate(java.lang.String value) {
      validate(fields()[4], value);
      this.serviceRate = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'serviceRate' field has been set */
    public boolean hasServiceRate() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'serviceRate' field */
    public com.oracle.datagrid.NoSQL.entity.Service.Builder clearServiceRate() {
      serviceRate = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'serviceCode' field */
    public java.lang.String getServiceCode() {
      return serviceCode;
    }
    
    /** Sets the value of the 'serviceCode' field */
    public com.oracle.datagrid.NoSQL.entity.Service.Builder setServiceCode(java.lang.String value) {
      validate(fields()[5], value);
      this.serviceCode = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'serviceCode' field has been set */
    public boolean hasServiceCode() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'serviceCode' field */
    public com.oracle.datagrid.NoSQL.entity.Service.Builder clearServiceCode() {
      serviceCode = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public Service build() {
      try {
        Service record = new Service();
        record.serviceId = fieldSetFlags()[0] ? this.serviceId : (java.lang.Integer) defaultValue(fields()[0]);
        record.serviceName = fieldSetFlags()[1] ? this.serviceName : (java.lang.String) defaultValue(fields()[1]);
        record.serviceDescription = fieldSetFlags()[2] ? this.serviceDescription : (java.lang.String) defaultValue(fields()[2]);
        record.serviceLOB = fieldSetFlags()[3] ? this.serviceLOB : (java.lang.String) defaultValue(fields()[3]);
        record.serviceRate = fieldSetFlags()[4] ? this.serviceRate : (java.lang.String) defaultValue(fields()[4]);
        record.serviceCode = fieldSetFlags()[5] ? this.serviceCode : (java.lang.String) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
