/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.oracle.datagrid.NoSQL.entity;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Location extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Location\",\"namespace\":\"com.oracle.datagrid.NoSQL.entity\",\"fields\":[{\"name\":\"locationId\",\"type\":\"int\"},{\"name\":\"address\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"city\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"state\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"postalCode\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"country\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int locationId;
  @Deprecated public java.lang.String address;
  @Deprecated public java.lang.String city;
  @Deprecated public java.lang.String state;
  @Deprecated public java.lang.String postalCode;
  @Deprecated public java.lang.String country;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Location() {}

  /**
   * All-args constructor.
   */
  public Location(java.lang.Integer locationId, java.lang.String address, java.lang.String city, java.lang.String state, java.lang.String postalCode, java.lang.String country) {
    this.locationId = locationId;
    this.address = address;
    this.city = city;
    this.state = state;
    this.postalCode = postalCode;
    this.country = country;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return locationId;
    case 1: return address;
    case 2: return city;
    case 3: return state;
    case 4: return postalCode;
    case 5: return country;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: locationId = (java.lang.Integer)value$; break;
    case 1: address = (java.lang.String)value$; break;
    case 2: city = (java.lang.String)value$; break;
    case 3: state = (java.lang.String)value$; break;
    case 4: postalCode = (java.lang.String)value$; break;
    case 5: country = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'locationId' field.
   */
  public java.lang.Integer getLocationId() {
    return locationId;
  }

  /**
   * Sets the value of the 'locationId' field.
   * @param value the value to set.
   */
  public void setLocationId(java.lang.Integer value) {
    this.locationId = value;
  }

  /**
   * Gets the value of the 'address' field.
   */
  public java.lang.String getAddress() {
    return address;
  }

  /**
   * Sets the value of the 'address' field.
   * @param value the value to set.
   */
  public void setAddress(java.lang.String value) {
    this.address = value;
  }

  /**
   * Gets the value of the 'city' field.
   */
  public java.lang.String getCity() {
    return city;
  }

  /**
   * Sets the value of the 'city' field.
   * @param value the value to set.
   */
  public void setCity(java.lang.String value) {
    this.city = value;
  }

  /**
   * Gets the value of the 'state' field.
   */
  public java.lang.String getState() {
    return state;
  }

  /**
   * Sets the value of the 'state' field.
   * @param value the value to set.
   */
  public void setState(java.lang.String value) {
    this.state = value;
  }

  /**
   * Gets the value of the 'postalCode' field.
   */
  public java.lang.String getPostalCode() {
    return postalCode;
  }

  /**
   * Sets the value of the 'postalCode' field.
   * @param value the value to set.
   */
  public void setPostalCode(java.lang.String value) {
    this.postalCode = value;
  }

  /**
   * Gets the value of the 'country' field.
   */
  public java.lang.String getCountry() {
    return country;
  }

  /**
   * Sets the value of the 'country' field.
   * @param value the value to set.
   */
  public void setCountry(java.lang.String value) {
    this.country = value;
  }

  /** Creates a new Location RecordBuilder */
  public static com.oracle.datagrid.NoSQL.entity.Location.Builder newBuilder() {
    return new com.oracle.datagrid.NoSQL.entity.Location.Builder();
  }
  
  /** Creates a new Location RecordBuilder by copying an existing Builder */
  public static com.oracle.datagrid.NoSQL.entity.Location.Builder newBuilder(com.oracle.datagrid.NoSQL.entity.Location.Builder other) {
    return new com.oracle.datagrid.NoSQL.entity.Location.Builder(other);
  }
  
  /** Creates a new Location RecordBuilder by copying an existing Location instance */
  public static com.oracle.datagrid.NoSQL.entity.Location.Builder newBuilder(com.oracle.datagrid.NoSQL.entity.Location other) {
    return new com.oracle.datagrid.NoSQL.entity.Location.Builder(other);
  }
  
  /**
   * RecordBuilder for Location instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Location>
    implements org.apache.avro.data.RecordBuilder<Location> {

    private int locationId;
    private java.lang.String address;
    private java.lang.String city;
    private java.lang.String state;
    private java.lang.String postalCode;
    private java.lang.String country;

    /** Creates a new Builder */
    private Builder() {
      super(com.oracle.datagrid.NoSQL.entity.Location.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.oracle.datagrid.NoSQL.entity.Location.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.locationId)) {
        this.locationId = data().deepCopy(fields()[0].schema(), other.locationId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.address)) {
        this.address = data().deepCopy(fields()[1].schema(), other.address);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.city)) {
        this.city = data().deepCopy(fields()[2].schema(), other.city);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.state)) {
        this.state = data().deepCopy(fields()[3].schema(), other.state);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.postalCode)) {
        this.postalCode = data().deepCopy(fields()[4].schema(), other.postalCode);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.country)) {
        this.country = data().deepCopy(fields()[5].schema(), other.country);
        fieldSetFlags()[5] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Location instance */
    private Builder(com.oracle.datagrid.NoSQL.entity.Location other) {
            super(com.oracle.datagrid.NoSQL.entity.Location.SCHEMA$);
      if (isValidValue(fields()[0], other.locationId)) {
        this.locationId = data().deepCopy(fields()[0].schema(), other.locationId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.address)) {
        this.address = data().deepCopy(fields()[1].schema(), other.address);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.city)) {
        this.city = data().deepCopy(fields()[2].schema(), other.city);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.state)) {
        this.state = data().deepCopy(fields()[3].schema(), other.state);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.postalCode)) {
        this.postalCode = data().deepCopy(fields()[4].schema(), other.postalCode);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.country)) {
        this.country = data().deepCopy(fields()[5].schema(), other.country);
        fieldSetFlags()[5] = true;
      }
    }

    /** Gets the value of the 'locationId' field */
    public java.lang.Integer getLocationId() {
      return locationId;
    }
    
    /** Sets the value of the 'locationId' field */
    public com.oracle.datagrid.NoSQL.entity.Location.Builder setLocationId(int value) {
      validate(fields()[0], value);
      this.locationId = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'locationId' field has been set */
    public boolean hasLocationId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'locationId' field */
    public com.oracle.datagrid.NoSQL.entity.Location.Builder clearLocationId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'address' field */
    public java.lang.String getAddress() {
      return address;
    }
    
    /** Sets the value of the 'address' field */
    public com.oracle.datagrid.NoSQL.entity.Location.Builder setAddress(java.lang.String value) {
      validate(fields()[1], value);
      this.address = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'address' field has been set */
    public boolean hasAddress() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'address' field */
    public com.oracle.datagrid.NoSQL.entity.Location.Builder clearAddress() {
      address = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'city' field */
    public java.lang.String getCity() {
      return city;
    }
    
    /** Sets the value of the 'city' field */
    public com.oracle.datagrid.NoSQL.entity.Location.Builder setCity(java.lang.String value) {
      validate(fields()[2], value);
      this.city = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'city' field has been set */
    public boolean hasCity() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'city' field */
    public com.oracle.datagrid.NoSQL.entity.Location.Builder clearCity() {
      city = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'state' field */
    public java.lang.String getState() {
      return state;
    }
    
    /** Sets the value of the 'state' field */
    public com.oracle.datagrid.NoSQL.entity.Location.Builder setState(java.lang.String value) {
      validate(fields()[3], value);
      this.state = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'state' field has been set */
    public boolean hasState() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'state' field */
    public com.oracle.datagrid.NoSQL.entity.Location.Builder clearState() {
      state = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'postalCode' field */
    public java.lang.String getPostalCode() {
      return postalCode;
    }
    
    /** Sets the value of the 'postalCode' field */
    public com.oracle.datagrid.NoSQL.entity.Location.Builder setPostalCode(java.lang.String value) {
      validate(fields()[4], value);
      this.postalCode = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'postalCode' field has been set */
    public boolean hasPostalCode() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'postalCode' field */
    public com.oracle.datagrid.NoSQL.entity.Location.Builder clearPostalCode() {
      postalCode = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'country' field */
    public java.lang.String getCountry() {
      return country;
    }
    
    /** Sets the value of the 'country' field */
    public com.oracle.datagrid.NoSQL.entity.Location.Builder setCountry(java.lang.String value) {
      validate(fields()[5], value);
      this.country = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'country' field has been set */
    public boolean hasCountry() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'country' field */
    public com.oracle.datagrid.NoSQL.entity.Location.Builder clearCountry() {
      country = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public Location build() {
      try {
        Location record = new Location();
        record.locationId = fieldSetFlags()[0] ? this.locationId : (java.lang.Integer) defaultValue(fields()[0]);
        record.address = fieldSetFlags()[1] ? this.address : (java.lang.String) defaultValue(fields()[1]);
        record.city = fieldSetFlags()[2] ? this.city : (java.lang.String) defaultValue(fields()[2]);
        record.state = fieldSetFlags()[3] ? this.state : (java.lang.String) defaultValue(fields()[3]);
        record.postalCode = fieldSetFlags()[4] ? this.postalCode : (java.lang.String) defaultValue(fields()[4]);
        record.country = fieldSetFlags()[5] ? this.country : (java.lang.String) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
